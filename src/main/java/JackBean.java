import java.nio.file.Path;
import java.util.ArrayList;

import java.util.Scanner;

import java.io.File;
import java.io.FileNotFoundException;

import java.io.FileWriter;
import java.io.IOException;

import java.nio.file.Files;
import java.nio.file.Paths;

public class JackBean {
    public static String horizontalLine = "____________________________________________________________";
    public static String greeting = "Hello homie! I'm JackBean, a chatbot designed to help you with your daily tasks!\nHow may I help you today my homie?";
    public static String exitMessage = "Bye homie! Come back if you need anything else. JackBean, signing off!";
    public static ArrayList<Task> taskList = new ArrayList<Task>();

    public static void howManyTasks() {
        System.out.println("Homie, you have " + taskList.size() + " task(s) in the list now.");
    }

    // this method was generated by github copilot (with a few edits on my side)
    public static void updateStorage() {
        try {
            FileWriter storageWriter = new FileWriter("./data/JackBeanStorage.txt");
            for (Task task : taskList) {
                if (task instanceof Todo) {
                    storageWriter.write("T | " + task.description + " | " + task.getStatusIcon() + "\n");
                } else if (task instanceof Deadline) {
                    storageWriter.write("D | " + task.description + " | " + ((Deadline) task).by + " | " + task.getStatusIcon() + "\n");
                } else if (task instanceof Event) {
                    storageWriter.write("E | " + task.description + " | " + ((Event) task).from + " | " + ((Event) task).to + " | " + task.getStatusIcon() + "\n");
                }
            }
            storageWriter.close();
        } catch (IOException e) {
            System.out.println("An error occurred while writing to your file homie.");
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        System.out.println(horizontalLine);
        System.out.println(greeting);
        System.out.println(horizontalLine);

        // create the file if it doesn't exit
        Path storageFilePath = Paths.get("./data/JackBeanStorage.txt");
        if (!Files.exists(storageFilePath)) {
            try {
                Files.createFile(storageFilePath);
            } catch (IOException e) {
                System.out.println("An error occurred while reading your file homie.");
                e.printStackTrace();
            }
        }

        // read the file and populate the taskList
        try {
            File storage = new File("./data/JackBeanStorage.txt");
            Scanner storageReader = new Scanner(storage);
            while (storageReader.hasNextLine()) {
                String data = storageReader.nextLine();
                String[] splitData = data.split(" \\| ");
                if (splitData[0].equals("T")) {
                    taskList.add(new Todo(splitData[1]));
                } else if (splitData[0].equals("D")) {
                    taskList.add(new Deadline(splitData[1], splitData[2]));
                } else if (splitData[0].equals("E")) {
                    taskList.add(new Event(splitData[1], splitData[2], splitData[3]));
                }
                if (splitData[splitData.length - 1].equals("X")) {
                    taskList.get(taskList.size() - 1).markAsDone();
                }
            }
            storageReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("I could not find your file homie.");
            e.printStackTrace();
        }

        // use file writer to write to the file


        Scanner userInput = new Scanner(System.in);
        // GitHub CoPilot helped a lot with auto-complete (except personalisation)
        // it is actually really smart haha
        while (true) {
            String input = userInput.nextLine();

            try {
                if (input.equalsIgnoreCase("bye")) { // I added equalsIgnoreCase() by myself
                    System.out.println(horizontalLine);
                    System.out.println(exitMessage);
                    System.out.println(horizontalLine);
                    userInput.close();
                    break;
                } else if (input.equalsIgnoreCase("help")) {
                    // GitHub copilot helped mostly with the response to help message
                    System.out.println(horizontalLine);
                    System.out.println("Yo homie! Here are the commands you can use:");
                    System.out.println("1. list - to list all tasks");
                    System.out.println("2. todo <description> - to add a todo task");
                    System.out.println("3. deadline <description> /by <date> - to add a deadline task");
                    System.out.println("4. event <description> /from <date> /to <date> - to add an event task");
                    System.out.println("5. mark <task number> - to mark a task as done");
                    System.out.println("6. unmark <task number> - to mark a task as undone");
                    System.out.println("7. bye - to exit the program");
                    System.out.println("8. help - to see this message again");
                    System.out.println("9. delete <task number> - to delete a task");
                    System.out.println("10. maybe some easter eggs in the future? :)");
                    System.out.println(horizontalLine);
                } else if (input.equalsIgnoreCase("list")) {
                    System.out.println(horizontalLine);
                    System.out.println("Yo homie!, here are the tasks in your list:");
                    for (int i = 0; i < taskList.size(); i++) {
                        System.out.println((i + 1) + ". " + taskList.get(i));
                    }
                    System.out.println(horizontalLine);
                } else if (input.toLowerCase().startsWith("mark")) {
                    // first use split and then parse the integer
                    String[] splitInput = input.split(" ");
                    int taskNumber = Integer.parseInt(splitInput[1]);

                    // check if task is already done
                    if (taskList.get(taskNumber - 1).isDone) {
                        System.out.println(horizontalLine);
                        System.out.println("This task is already done my homie:");
                        System.out.println(taskList.get(taskNumber - 1));
                        System.out.println(horizontalLine);
                        continue;
                    }

                    // now handle implementation
                    taskList.get(taskNumber - 1).markAsDone();
                    updateStorage();
                    System.out.println(horizontalLine);
                    System.out.println("LESGOOO homie! Good job on finishing this task:");
                    System.out.println(taskList.get(taskNumber - 1));
                    System.out.println(horizontalLine);
                } else if (input.toLowerCase().startsWith("unmark")) {
                    // first use split and then parse the integer
                    String[] splitInput = input.split(" ");
                    int taskNumber = Integer.parseInt(splitInput[1]);

                    // check if task is already undone
                    if (!taskList.get(taskNumber - 1).isDone) {
                        System.out.println(horizontalLine);
                        System.out.println("This task hasn't been marked done yet my homie:");
                        System.out.println(taskList.get(taskNumber - 1));
                        System.out.println(horizontalLine);
                        continue;
                    }

                    // now handle implementation
                    taskList.get(taskNumber - 1).markAsUndone();
                    updateStorage();
                    System.out.println(horizontalLine);
                    System.out.println("All good my homie! You've got this, I've undone this task:");
                    System.out.println(taskList.get(taskNumber - 1));
                    System.out.println(horizontalLine);
                } else if (input.toLowerCase().startsWith("delete")) {
                    // first use split and then parse the integer
                    String[] splitInput = input.split(" ");
                    int taskNumber = Integer.parseInt(splitInput[1]);

                    // now handle implementation
                    System.out.println(horizontalLine);
                    System.out.println("Got it my homie! I've removed this task:");
                    System.out.println(taskList.get(taskNumber - 1));
                    taskList.remove(taskNumber - 1);
                    updateStorage();
                    howManyTasks();
                    System.out.println(horizontalLine);
                } else if (input.toLowerCase().startsWith("todo")) {
                    if (input.length() < 6) {
                        throw new NotEnoughArgumentsException("todo", "not enough arguments");
                    }
                    String description = input.substring(5);
                    taskList.add(new Todo(description));
                    updateStorage();
                    System.out.println(horizontalLine);
                    System.out.println("Got it homie! I've added your todo, LESGOOOOO:\n" + taskList.get(taskList.size() - 1));
                    howManyTasks();
                    System.out.println(horizontalLine);
                } else if (input.toLowerCase().startsWith("deadline")) {
                    String important = input.substring(9);
                    String[] splitImportant = important.split(" /");
                    if (splitImportant.length > 2) {
                        throw new TooManyArgumentsException("deadline", "too many arguments");
                    } else if (splitImportant.length < 2) {
                        throw new NotEnoughArgumentsException("deadline", "not enough arguments");
                    }
                    String description = splitImportant[0];
                    String by = splitImportant[1].substring(3);

                    taskList.add(new Deadline(description, by));
                    updateStorage();
                    System.out.println(horizontalLine);
                    System.out.println("Got it homie! I've added your deadline, LESGOOOOO:\n" + taskList.get(taskList.size() - 1));
                    howManyTasks();
                    System.out.println(horizontalLine);
                } else if (input.toLowerCase().startsWith("event")) {
                    String important = input.substring(6);
                    String[] splitImportant = important.split(" /");
                    if (splitImportant.length > 3) {
                        throw new TooManyArgumentsException("event", "too many arguments");
                    } else if (splitImportant.length < 3) {
                        throw new NotEnoughArgumentsException("event", "not enough arguments");
                    }
                    String description = splitImportant[0];
                    String from = splitImportant[1].substring(5);
                    String to = splitImportant[2].substring(3);


                    taskList.add(new Event(description, from, to));
                    updateStorage();
                    System.out.println(horizontalLine);
                    System.out.println("Got it homie! I've added your event, LESGOOOOO:\n" + taskList.get(taskList.size() - 1));
                    howManyTasks();
                    System.out.println(horizontalLine);
                } else {
                    throw new InvalidTaskTypeException();
                }
            } catch (Exception e) {
                System.out.println(horizontalLine);
                System.out.println(e);
                System.out.println(horizontalLine);
            }
        }
    }
}
